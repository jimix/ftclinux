--- a/drivers/net/ethernet/ralink/mdio_rt2880.c
+++ b/drivers/net/ethernet/ralink/mdio_rt2880.c
@@ -163,70 +163,72 @@ int rt2880_mdio_write(struct mii_bus *bu
 	return rt2880_mdio_wait_ready(priv);
 }
 
-void rt2880_port_init(struct fe_priv *priv, struct device_node *np)
+static int
+rt2800_port_parse_fixed_link(struct fe_priv *priv, struct device_node *np,
+			     u32 port)
 {
-	const __be32 *id = of_get_property(np, "reg", NULL);
-	const __be32 *link;
-	int size;
-	int phy_mode;
-
-	if (!id || (be32_to_cpu(*id) != 0)) {
-		pr_err("%s: invalid port id\n", np->name);
-		return;
-	}
-
-	priv->phy->phy_fixed[0] = of_get_property(np, "ralink,fixed-link", &size);
-	if (priv->phy->phy_fixed[0] && (size != (4 * sizeof(*priv->phy->phy_fixed[0])))) {
-		pr_err("%s: invalid fixed link property\n", np->name);
-		priv->phy->phy_fixed[0] = NULL;
-		return;
+	const __be32 *link_prop;
+	u32 link_params[4];
+	int err;
+
+	err = of_property_read_u32_array(np, "ralink,fixed-link", link_params,
+					 ARRAY_SIZE(link_params));
+	if (err) {
+		pr_err("%s: invalid fixed-link property\n", np->name);
+		return -EINVAL;
 	}
 
-	phy_mode = of_get_phy_mode(np);
-	switch (phy_mode) {
-	case PHY_INTERFACE_MODE_RGMII:
+	switch (link_params[0]) {
+	case SPEED_10:
 		break;
-	case PHY_INTERFACE_MODE_MII:
+	case SPEED_100:
 		break;
-	case PHY_INTERFACE_MODE_RMII:
+	case SPEED_1000:
 		break;
 	default:
-		if (!priv->phy->phy_fixed[0])
-			dev_err(priv->device, "port %d - invalid phy mode\n", priv->phy->speed[0]);
-		break;
+		dev_err(priv->device, "invalid link speed: %u\n",
+			link_params[0]);
+		return -EINVAL;
 	}
 
-	priv->phy->phy_node[0] = of_parse_phandle(np, "phy-handle", 0);
-	if (!priv->phy->phy_node[0] && !priv->phy->phy_fixed[0])
+	link_prop = of_get_property(np, "ralink,fixed-link", NULL);
+	WARN_ON(!link_prop);
+	priv->phy->phy_fixed[port] = link_prop;
+
+	priv->link[port] = 1;
+	priv->phy->speed[port] = link_params[0];
+	priv->phy->duplex[port] = link_params[1];
+	priv->phy->tx_fc[port] = link_params[2];
+	priv->phy->rx_fc[port] = link_params[3];
+
+	dev_info(priv->device, "using fixed link parameters\n");
+	rt2880_mdio_link_adjust(priv, 0);
+
+	return 0;
+}
+
+void rt2880_port_init(struct fe_priv *priv, struct device_node *np)
+{
+	struct property *prop;
+	u32 port;
+	int err;
+
+	err = of_property_read_u32(np, "reg", &port);
+	if (err) {
+		pr_err("%s: unable to get port id\n", np->name);
 		return;
+	}
 
-	if (priv->phy->phy_fixed[0]) {
-		link = priv->phy->phy_fixed[0];
-		priv->phy->speed[0] = be32_to_cpup(link++);
-		priv->phy->duplex[0] = be32_to_cpup(link++);
-		priv->phy->tx_fc[0] = be32_to_cpup(link++);
-		priv->phy->rx_fc[0] = be32_to_cpup(link++);
-
-		priv->link[0] = 1;
-		switch (priv->phy->speed[0]) {
-		case SPEED_10:
-			break;
-		case SPEED_100:
-			break;
-		case SPEED_1000:
-			break;
-		default:
-			dev_err(priv->device, "invalid link speed: %d\n", priv->phy->speed[0]);
-			priv->phy->phy_fixed[0] = 0;
-			return;
-		}
-		dev_info(priv->device, "using fixed link parameters\n");
-		rt2880_mdio_link_adjust(priv, 0);
+	if (port != 0) {
+		pr_err("%s: invalid port id %u\n", np->name, port);
 		return;
 	}
-	if (priv->phy->phy_node[0] && priv->mii_bus->phy_map[0]) {
-		fe_connect_phy_node(priv, priv->phy->phy_node[0]);
+
+	prop = of_find_property(np, "ralink,fixed-link", NULL);
+	if (prop) {
+		rt2800_port_parse_fixed_link(priv, np, port);
+		return;
 	}
 
-	return;
+	fe_connect_phy_node(priv, np);
 }
